// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CalcMag,hls_ip_2016_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.623000,HLS_SYN_LAT=39,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=2580,HLS_SYN_LUT=3102}" *)

module CalcMag (
        ap_clk,
        ap_rst,
        x,
        y,
        ap_return
);

parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;

input   ap_clk;
input   ap_rst;
input  [15:0] x;
input  [15:0] y;
output  [31:0] ap_return;

reg   [15:0] x_read_reg_73;
wire  signed [31:0] tmp_3_fu_60_p2;
reg  signed [31:0] tmp_3_reg_78;
wire  signed [31:0] grp_fu_66_p3;
reg  signed [31:0] tmp_4_reg_83;
wire   [63:0] grp_fu_45_p1;
reg   [63:0] tmp_5_reg_88;
wire   [63:0] grp_fu_48_p2;
reg   [63:0] tmp_6_reg_93;
wire  signed [15:0] tmp_3_fu_60_p0;
wire  signed [31:0] tmp_2_fu_53_p1;
wire  signed [15:0] tmp_3_fu_60_p1;
wire  signed [15:0] grp_fu_66_p0;
wire  signed [31:0] tmp_fu_57_p1;
wire  signed [15:0] grp_fu_66_p1;
wire   [31:0] tmp_7_fu_42_p1;

CalcMag_fptrunc_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
CalcMag_fptrunc_6bkb_U1(
    .din0(tmp_6_reg_93),
    .dout(tmp_7_fu_42_p1)
);

CalcMag_sitodp_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
CalcMag_sitodp_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_83),
    .ce(1'b1),
    .dout(grp_fu_45_p1)
);

CalcMag_dsqrt_64ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
CalcMag_dsqrt_64ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_const_lv64_0),
    .din1(tmp_5_reg_88),
    .ce(1'b1),
    .dout(grp_fu_48_p2)
);

CalcMag_mul_mul_1eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
CalcMag_mul_mul_1eOg_U4(
    .din0(tmp_3_fu_60_p0),
    .din1(tmp_3_fu_60_p1),
    .dout(tmp_3_fu_60_p2)
);

CalcMag_mac_muladfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CalcMag_mac_muladfYi_U5(
    .din0(grp_fu_66_p0),
    .din1(grp_fu_66_p1),
    .din2(tmp_3_reg_78),
    .dout(grp_fu_66_p3)
);

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        tmp_3_reg_78 <= tmp_3_fu_60_p2;
        tmp_4_reg_83 <= grp_fu_66_p3;
        tmp_5_reg_88 <= grp_fu_45_p1;
        tmp_6_reg_93 <= grp_fu_48_p2;
        x_read_reg_73 <= x;
    end
end

assign ap_return = tmp_7_fu_42_p1;

assign grp_fu_66_p0 = tmp_fu_57_p1;

assign grp_fu_66_p1 = tmp_fu_57_p1;

assign tmp_2_fu_53_p1 = $signed(y);

assign tmp_3_fu_60_p0 = tmp_2_fu_53_p1;

assign tmp_3_fu_60_p1 = tmp_2_fu_53_p1;

assign tmp_fu_57_p1 = $signed(x_read_reg_73);

endmodule //CalcMag
